service: usage-billing-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs22.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}

  # IAM permissions for functions
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: '*'
        - Effect: Allow
          Action:
            - athena:StartQueryExecution
            - athena:GetQueryExecution
            - athena:GetQueryResults
            - athena:StopQueryExecution
          Resource: '*'
        - Effect: Allow
          Action:
            - glue:GetDatabase
            - glue:GetTable
            - glue:GetPartitions
          Resource: '*'
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:ListBucket
          Resource:
            - !Sub arn:aws:s3:::${self:service}-${self:provider.stage}-cloudfront-logs-${aws:accountId}/*
            - !Sub arn:aws:s3:::${self:service}-${self:provider.stage}-cloudfront-logs-${aws:accountId}
            - !Sub arn:aws:s3:::${self:service}-${self:provider.stage}-cloudfront-realtime-logs-${aws:accountId}/*
            - !Sub arn:aws:s3:::${self:service}-${self:provider.stage}-cloudfront-realtime-logs-${aws:accountId}
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:ListBucket
          Resource:
            - !Sub arn:aws:s3:::${self:service}-${self:provider.stage}-athena-results-${aws:accountId}/*
            - !Sub arn:aws:s3:::${self:service}-${self:provider.stage}-athena-results-${aws:accountId}
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:GetItem
            - dynamodb:Query
          Resource:
            - !GetAtt UsageMetricsTable.Arn
        - Effect: Allow
          Action:
            - kinesis:GetRecords
            - kinesis:GetShardIterator
            - kinesis:DescribeStream
            - kinesis:ListStreams
          Resource:
            - !GetAtt RealtimeLogsKinesisStream.Arn

functions:
  example:
    handler: src/handlers/example.handler
    description: Example endpoint for usage tracking
    events:
      - http:
          path: /example
          method: get
          private: true # Requires API key
          cors: true

  anotherExample:
    handler: src/handlers/another.handler
    description: Another example endpoint for usage tracking
    events:
      - http:
          path: /data
          method: post
          private: true # Requires API key
          cors: true

  rollupUsage:
    handler: src/handlers/rollup-usage.handler
    description: Daily rollup of CloudFront logs into DynamoDB via Athena
    timeout: 300 # 5 minutes
    memorySize: 512
    environment:
      ATHENA_DATABASE: !Ref UsageDatabase
      ATHENA_OUTPUT_BUCKET: !Sub s3://${AthenaResultsBucket}/
      USAGE_METRICS_TABLE: !Ref UsageMetricsTable
    events:
      - schedule:
          name: ${self:service}-${self:provider.stage}-daily-rollup
          description: Daily usage rollup at 2 AM UTC
          rate: cron(0 2 * * ? *)
          enabled: true

  getUsage:
    handler: src/handlers/get-usage.handler
    description: Get usage metrics for billing
    environment:
      USAGE_METRICS_TABLE: !Ref UsageMetricsTable
    events:
      - http:
          path: /usage
          method: get
          cors: true

  transformRealtimeLogs:
    handler: src/handlers/transform-realtime-logs.handler
    description: Transform CloudFront real-time logs from TSV to JSON for Parquet
    timeout: 60
    memorySize: 128

resources:
  Resources:
    # API Gateway API Keys
    ApiKey1:
      Type: AWS::ApiGateway::ApiKey
      DependsOn: ApiGatewayRestApi
      Properties:
        Name: ${self:service}-${self:provider.stage}-key-1
        Description: API Key for customer 1
        Enabled: true
        StageKeys:
          - RestApiId:
              Ref: ApiGatewayRestApi
            StageName: ${self:provider.stage}

    ApiKey2:
      Type: AWS::ApiGateway::ApiKey
      DependsOn: ApiGatewayRestApi
      Properties:
        Name: ${self:service}-${self:provider.stage}-key-2
        Description: API Key for customer 2
        Enabled: true
        StageKeys:
          - RestApiId:
              Ref: ApiGatewayRestApi
            StageName: ${self:provider.stage}

    # Usage Plan
    UsagePlan:
      Type: AWS::ApiGateway::UsagePlan
      DependsOn: ApiGatewayRestApi
      Properties:
        UsagePlanName: ${self:service}-${self:provider.stage}-usage-plan
        Description: Usage plan for API billing
        ApiStages:
          - ApiId:
              Ref: ApiGatewayRestApi
            Stage: ${self:provider.stage}
        Quota:
          Limit: 10000
          Period: MONTH
        Throttle:
          BurstLimit: 200
          RateLimit: 100

    # Link API Key 1 to Usage Plan
    UsagePlanKey1:
      Type: AWS::ApiGateway::UsagePlanKey
      DependsOn: ApiGatewayRestApi
      Properties:
        KeyId:
          Ref: ApiKey1
        KeyType: API_KEY
        UsagePlanId:
          Ref: UsagePlan

    # Link API Key 2 to Usage Plan
    UsagePlanKey2:
      Type: AWS::ApiGateway::UsagePlanKey
      DependsOn: ApiGatewayRestApi
      Properties:
        KeyId:
          Ref: ApiKey2
        KeyType: API_KEY
        UsagePlanId:
          Ref: UsagePlan

    # S3 Bucket for CloudFront Access Logs
    CloudFrontLogsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-cloudfront-logs-${aws:accountId}
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerPreferred
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        LifecycleConfiguration:
          Rules:
            - Id: DeleteOldLogs
              Status: Enabled
              ExpirationInDays: 90

    # S3 Bucket for CloudFront Real-time Logs
    RealtimeLogsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-cloudfront-realtime-logs-${aws:accountId}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        LifecycleConfiguration:
          Rules:
            - Id: DeleteOldRealtimeLogs
              Status: Enabled
              ExpirationInDays: 90

    # Kinesis Data Stream for Real-time Logs
    RealtimeLogsKinesisStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${self:service}-${self:provider.stage}-realtime-logs
        ShardCount: 1
        RetentionPeriodHours: 24

    # IAM Role for CloudFront Real-time Logs
    CloudFrontRealtimeLogRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-cf-realtime-log-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: cloudfront.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: CloudFrontRealtimeLogPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - kinesis:DescribeStreamSummary
                    - kinesis:DescribeStream
                    - kinesis:PutRecord
                    - kinesis:PutRecords
                  Resource: !GetAtt RealtimeLogsKinesisStream.Arn

    # CloudFront Real-time Log Configuration
    RealtimeLogConfig:
      Type: AWS::CloudFront::RealtimeLogConfig
      Properties:
        Name: ${self:service}-${self:provider.stage}-realtime-log-config
        EndPoints:
          - StreamType: Kinesis
            KinesisStreamConfig:
              RoleARN: !GetAtt CloudFrontRealtimeLogRole.Arn
              StreamARN: !GetAtt RealtimeLogsKinesisStream.Arn
        # capture all requests at 100%
        SamplingRate: 100
        Fields:
          - timestamp
          - c-ip
          - s-ip
          - time-to-first-byte
          - sc-status
          - sc-bytes
          - cs-method
          - cs-protocol
          - cs-host
          - cs-uri-stem
          - cs-uri-query
          - cs-bytes
          - x-edge-location
          - x-edge-request-id
          - x-host-header
          - time-taken
          - cs-protocol-version
          - c-ip-version
          - cs-user-agent
          - cs-referer
          - cs-cookie
          - x-edge-response-result-type
          - x-forwarded-for
          - ssl-protocol
          - ssl-cipher
          - x-edge-result-type
          - fle-encrypted-fields
          - fle-status
          - sc-content-type
          - sc-content-len
          - sc-range-start
          - sc-range-end
          - c-port
          - x-edge-detailed-result-type
          - c-country
          - cs-accept-encoding
          - cs-accept
          - cache-behavior-path-pattern
          - cs-headers
          - cs-header-names
          - cs-headers-count
          - origin-fbl
          - origin-lbl
          - asn

    # IAM Role for Kinesis Firehose
    FirehoseDeliveryRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-firehose-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: firehose.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: FirehoseDeliveryPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:AbortMultipartUpload
                    - s3:GetBucketLocation
                    - s3:GetObject
                    - s3:ListBucket
                    - s3:ListBucketMultipartUploads
                    - s3:PutObject
                  Resource:
                    - !GetAtt RealtimeLogsBucket.Arn
                    - !Sub ${RealtimeLogsBucket.Arn}/*
                - Effect: Allow
                  Action:
                    - kinesis:DescribeStream
                    - kinesis:GetShardIterator
                    - kinesis:GetRecords
                    - kinesis:ListShards
                  Resource: !GetAtt RealtimeLogsKinesisStream.Arn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - glue:GetTable
                    - glue:GetTableVersion
                    - glue:GetTableVersions
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                    - lambda:GetFunctionConfiguration
                  Resource: !GetAtt TransformRealtimeLogsLambdaFunction.Arn

    # Kinesis Firehose Delivery Stream
    RealtimeLogsFirehose:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamName: ${self:service}-${self:provider.stage}-realtime-logs-firehose
        DeliveryStreamType: KinesisStreamAsSource
        KinesisStreamSourceConfiguration:
          KinesisStreamARN: !GetAtt RealtimeLogsKinesisStream.Arn
          RoleARN: !GetAtt FirehoseDeliveryRole.Arn
        ExtendedS3DestinationConfiguration:
          BucketARN: !GetAtt RealtimeLogsBucket.Arn
          RoleARN: !GetAtt FirehoseDeliveryRole.Arn
          Prefix: 'realtime-logs/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/'
          ErrorOutputPrefix: 'realtime-logs-errors/!{firehose:error-output-type}/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/'
          BufferingHints:
            SizeInMBs: 128
            IntervalInSeconds: 300
          CompressionFormat: UNCOMPRESSED
          DataFormatConversionConfiguration:
            Enabled: true
            SchemaConfiguration:
              DatabaseName: !Ref UsageDatabase
              TableName: !Ref RealtimeLogsTable
              RoleARN: !GetAtt FirehoseDeliveryRole.Arn
              Region: !Ref AWS::Region
            InputFormatConfiguration:
              Deserializer:
                OpenXJsonSerDe: {}
            OutputFormatConfiguration:
              Serializer:
                ParquetSerDe:
                  Compression: SNAPPY
          ProcessingConfiguration:
            Enabled: true
            Processors:
              - Type: Lambda
                Parameters:
                  - ParameterName: LambdaArn
                    ParameterValue: !GetAtt TransformRealtimeLogsLambdaFunction.Arn
          CloudWatchLoggingOptions:
            Enabled: true
            LogGroupName: !Sub /aws/kinesisfirehose/${self:service}-${self:provider.stage}-realtime-logs
            LogStreamName: S3Delivery

    # Custom Cache Policy - preserves querystrings
    CustomCachePolicy:
      Type: AWS::CloudFront::CachePolicy
      Properties:
        CachePolicyConfig:
          Name: ${self:service}-${self:provider.stage}-no-cache-preserve-qs
          Comment: Disables caching, preserves querystrings for logging
          DefaultTTL: 1
          MaxTTL: 31536000
          MinTTL: 0
          ParametersInCacheKeyAndForwardedToOrigin:
            EnableAcceptEncodingGzip: false
            EnableAcceptEncodingBrotli: false
            HeadersConfig:
              HeaderBehavior: whitelist
              # These are the headers that are custom and forwarded to origin
              Headers:
                - Authorization
                - x-api-key
                - foo
            CookiesConfig:
              CookieBehavior: none
            QueryStringsConfig:
              QueryStringBehavior: all  # Key difference - preserves querystrings

    # Custom Origin Request Policy - forwards x-api-key header
    CustomOriginRequestPolicy:
      Type: AWS::CloudFront::OriginRequestPolicy
      Properties:
        OriginRequestPolicyConfig:
          Name: ${self:service}-${self:provider.stage}-origin-policy
          Comment: Forward API key header to origin
          HeadersConfig:
            HeaderBehavior: allExcept
            Headers:
              - Host
          CookiesConfig:
            CookieBehavior: all
          QueryStringsConfig:
            QueryStringBehavior: all

    # This didn't work, modified querystring not in the basic logs
    # CloudFront Function to extract API key for logging
    # CloudFrontApiKeyFunction:
    #   Type: AWS::CloudFront::Function
    #   Properties:
    #     Name: ${self:service}-${self:provider.stage}-api-key-extractor
    #     AutoPublish: true
    #     FunctionCode: |
    #       function handler(event) {
    #         var request = event.request;
    #         var headers = request.headers;

    #         // CloudFront normalizes all header names to lowercase
    #         var apiKey = 'no-key';
    #         if (headers['x-api-key']) {
    #           apiKey = headers['x-api-key'].value;
    #         }

    #         // Initialize querystring if it doesn't exist
    #         if (!request.querystring) {
    #           request.querystring = {};
    #         }

    #         // Add API key to querystring for logging
    #         request.querystring['cf_api_key'] = { value: apiKey };

    #         return request;
    #       }
    #     FunctionConfig:
    #       Comment: Extracts API key from header and adds to querystring for logging
    #       Runtime: cloudfront-js-2.0

    # CloudFront Distribution
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: ${self:service}-${self:provider.stage} CDN for usage tracking
          Enabled: true
          HttpVersion: http2and3
          PriceClass: PriceClass_100

          # CloudFront Access Logging
          Logging:
            Bucket: !GetAtt CloudFrontLogsBucket.DomainName
            IncludeCookies: false
            Prefix: cloudfront-logs/

          # Origins - API Gateway
          Origins:
            - Id: ApiGatewayOrigin
              DomainName: !Sub "${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com"
              OriginPath: /${self:provider.stage}
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
                OriginSSLProtocols:
                  - TLSv1.2

          # Default Cache Behavior
          DefaultCacheBehavior:
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            Compress: true

            # # Attach the API key extractor function
            # FunctionAssociations:
            #   - EventType: viewer-request
            #     FunctionARN: !GetAtt CloudFrontApiKeyFunction.FunctionMetadata.FunctionARN
            CachePolicyId: !Ref CustomCachePolicy
            OriginRequestPolicyId: !Ref CustomOriginRequestPolicy
            RealtimeLogConfigArn: !GetAtt RealtimeLogConfig.Arn
          # Custom error responses
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 403
              ResponsePagePath: /error.html
              ErrorCachingMinTTL: 300
            - ErrorCode: 404
              ResponseCode: 404
              ResponsePagePath: /error.html
              ErrorCachingMinTTL: 300

    # Glue Database for Athena queries
    UsageDatabase:
      Type: AWS::Glue::Database
      Properties:
        CatalogId: !Ref AWS::AccountId
        DatabaseInput:
          Name: ${self:service}_${self:provider.stage}_usage_db
          Description: Database for CloudFront usage tracking

    # Glue Table for CloudFront Access Logs
    CloudFrontLogsTable:
      Type: AWS::Glue::Table
      Properties:
        CatalogId: !Ref AWS::AccountId
        DatabaseName: !Ref UsageDatabase
        TableInput:
          Name: cloudfront_logs
          Description: CloudFront access logs for usage billing
          TableType: EXTERNAL_TABLE
          Parameters:
            EXTERNAL: 'TRUE'
          StorageDescriptor:
            Location: !Sub s3://${CloudFrontLogsBucket}/cloudfront-logs/
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              Parameters:
                field.delim: "\t"
                serialization.format: "\t"
                skip.header.line.count: '2'
            Columns:
              - Name: date
                Type: date
              - Name: time
                Type: string
              - Name: x_edge_location
                Type: string
              - Name: sc_bytes
                Type: bigint
              - Name: c_ip
                Type: string
              - Name: cs_method
                Type: string
              - Name: cs_host
                Type: string
              - Name: cs_uri_stem
                Type: string
              - Name: sc_status
                Type: int
              - Name: cs_referer
                Type: string
              - Name: cs_user_agent
                Type: string
              - Name: cs_uri_query
                Type: string
              - Name: cs_cookie
                Type: string
              - Name: x_edge_result_type
                Type: string
              - Name: x_edge_request_id
                Type: string
              - Name: x_host_header
                Type: string
              - Name: cs_protocol
                Type: string
              - Name: cs_bytes
                Type: bigint
              - Name: time_taken
                Type: float
              - Name: x_forwarded_for
                Type: string
              - Name: ssl_protocol
                Type: string
              - Name: ssl_cipher
                Type: string
              - Name: x_edge_response_result_type
                Type: string
              - Name: cs_protocol_version
                Type: string
              - Name: fle_status
                Type: string
              - Name: fle_encrypted_fields
                Type: int
              - Name: c_port
                Type: int
              - Name: time_to_first_byte
                Type: float
              - Name: x_edge_detailed_result_type
                Type: string
              - Name: sc_content_type
                Type: string
              - Name: sc_content_len
                Type: bigint
              - Name: sc_range_start
                Type: bigint
              - Name: sc_range_end
                Type: bigint

    # Glue Table for CloudFront Real-time Logs
    RealtimeLogsTable:
      Type: AWS::Glue::Table
      Properties:
        CatalogId: !Ref AWS::AccountId
        DatabaseName: !Ref UsageDatabase
        TableInput:
          Name: cloudfront_realtime_logs
          Description: CloudFront real-time logs for usage billing with headers
          TableType: EXTERNAL_TABLE
          Parameters:
            EXTERNAL: 'TRUE'
            'projection.enabled': 'true'
            'projection.year.type': 'integer'
            'projection.year.range': '2024,2030'
            'projection.month.type': 'integer'
            'projection.month.range': '01,12'
            'projection.month.digits': '2'
            'projection.day.type': 'integer'
            'projection.day.range': '01,31'
            'projection.day.digits': '2'
            'storage.location.template': !Sub 's3://${RealtimeLogsBucket}/realtime-logs/year=${!year}/month=${!month}/day=${!day}/'
          StorageDescriptor:
            Location: !Sub s3://${RealtimeLogsBucket}/realtime-logs/
            InputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
            OutputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
            Compressed: true
            SerdeInfo:
              SerializationLibrary: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe
              Parameters:
                serialization.format: '1'
            Columns:
              - Name: timestamp
                Type: bigint
              - Name: c_ip
                Type: string
              - Name: s_ip
                Type: string
              - Name: time_to_first_byte
                Type: double
              - Name: sc_status
                Type: int
              - Name: sc_bytes
                Type: bigint
              - Name: cs_method
                Type: string
              - Name: cs_protocol
                Type: string
              - Name: cs_host
                Type: string
              - Name: cs_uri_stem
                Type: string
              - Name: cs_uri_query
                Type: string
              - Name: cs_bytes
                Type: bigint
              - Name: x_edge_location
                Type: string
              - Name: x_edge_request_id
                Type: string
              - Name: x_host_header
                Type: string
              - Name: time_taken
                Type: double
              - Name: cs_protocol_version
                Type: string
              - Name: c_ip_version
                Type: string
              - Name: cs_user_agent
                Type: string
              - Name: cs_referer
                Type: string
              - Name: cs_cookie
                Type: string
              - Name: x_edge_response_result_type
                Type: string
              - Name: x_forwarded_for
                Type: string
              - Name: ssl_protocol
                Type: string
              - Name: ssl_cipher
                Type: string
              - Name: x_edge_result_type
                Type: string
              - Name: fle_encrypted_fields
                Type: int
              - Name: fle_status
                Type: string
              - Name: sc_content_type
                Type: string
              - Name: sc_content_len
                Type: bigint
              - Name: sc_range_start
                Type: bigint
              - Name: sc_range_end
                Type: bigint
              - Name: c_port
                Type: int
              - Name: x_edge_detailed_result_type
                Type: string
              - Name: c_country
                Type: string
              - Name: cs_accept_encoding
                Type: string
              - Name: cs_accept
                Type: string
              - Name: cache_behavior_path_pattern
                Type: string
              - Name: cs_headers
                Type: string
              - Name: cs_header_names
                Type: string
              - Name: cs_headers_count
                Type: int
              - Name: origin_fbl
                Type: double
              - Name: origin_lbl
                Type: double
              - Name: asn
                Type: bigint
              - Name: api_key
                Type: string
          PartitionKeys:
            - Name: year
              Type: string
            - Name: month
              Type: string
            - Name: day
              Type: string

    # S3 Bucket for Athena Query Results
    AthenaResultsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-athena-results-${aws:accountId}

    # DynamoDB Table for Usage Metrics
    UsageMetricsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-usage-metrics
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: api_key
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: api_key
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          - Key: Purpose
            Value: UsageTracking

  Outputs:
    ApiKeyId1:
      Description: API Key 1 ID
      Value:
        Ref: ApiKey1

    ApiKeyId2:
      Description: API Key 2 ID
      Value:
        Ref: ApiKey2

    UsagePlanId:
      Description: Usage Plan ID
      Value:
        Ref: UsagePlan

    CloudFrontDistributionId:
      Description: CloudFront Distribution ID
      Value:
        Ref: CloudFrontDistribution

    CloudFrontDomainName:
      Description: CloudFront Distribution Domain Name
      Value: !GetAtt CloudFrontDistribution.DomainName

    CloudFrontLogsBucketName:
      Description: S3 Bucket for CloudFront Access Logs
      Value:
        Ref: CloudFrontLogsBucket

    AthenaResultsBucketName:
      Description: S3 Bucket for Athena Results
      Value:
        Ref: AthenaResultsBucket

    GlueDatabaseName:
      Description: Glue Database for Athena
      Value:
        Ref: UsageDatabase

    GlueTableName:
      Description: Glue Table for CloudFront Logs
      Value:
        Ref: CloudFrontLogsTable

    RealtimeLogsTableName:
      Description: Glue Table for CloudFront Real-time Logs
      Value:
        Ref: RealtimeLogsTable

    UsageMetricsTableName:
      Description: DynamoDB Table for Usage Metrics
      Value:
        Ref: UsageMetricsTable

    RealtimeLogsBucketName:
      Description: S3 Bucket for CloudFront Real-time Logs
      Value:
        Ref: RealtimeLogsBucket

    RealtimeLogsKinesisStreamName:
      Description: Kinesis Stream for Real-time Logs
      Value:
        Ref: RealtimeLogsKinesisStream

    RealtimeLogsFirehoseName:
      Description: Kinesis Firehose for Real-time Logs
      Value:
        Ref: RealtimeLogsFirehose

    RealtimeLogConfigArn:
      Description: CloudFront Real-time Log Configuration ARN
      Value: !GetAtt RealtimeLogConfig.Arn
