service: usage-billing-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs22.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}

  # IAM permissions for functions
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: '*'
        - Effect: Allow
          Action:
            - athena:StartQueryExecution
            - athena:GetQueryExecution
            - athena:GetQueryResults
            - athena:StopQueryExecution
          Resource: '*'
        - Effect: Allow
          Action:
            - glue:GetDatabase
            - glue:GetTable
            - glue:GetPartitions
          Resource: '*'
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:ListBucket
          Resource:
            - !Sub arn:aws:s3:::${self:service}-${self:provider.stage}-cloudfront-logs-${aws:accountId}/*
            - !Sub arn:aws:s3:::${self:service}-${self:provider.stage}-cloudfront-logs-${aws:accountId}
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:ListBucket
          Resource:
            - !Sub arn:aws:s3:::${self:service}-${self:provider.stage}-athena-results-${aws:accountId}/*
            - !Sub arn:aws:s3:::${self:service}-${self:provider.stage}-athena-results-${aws:accountId}
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:GetItem
            - dynamodb:Query
          Resource:
            - !GetAtt UsageMetricsTable.Arn

functions:
  example:
    handler: src/handlers/example.handler
    description: Example endpoint for usage tracking
    events:
      - http:
          path: /example
          method: get
          private: true # Requires API key
          cors: true

  anotherExample:
    handler: src/handlers/another.handler
    description: Another example endpoint for usage tracking
    events:
      - http:
          path: /data
          method: post
          private: true # Requires API key
          cors: true

  rollupUsage:
    handler: src/handlers/rollup-usage.handler
    description: Daily rollup of CloudFront logs into DynamoDB via Athena
    timeout: 300 # 5 minutes
    memorySize: 512
    environment:
      ATHENA_DATABASE: !Ref UsageDatabase
      ATHENA_OUTPUT_BUCKET: !Sub s3://${AthenaResultsBucket}/
      USAGE_METRICS_TABLE: !Ref UsageMetricsTable
    events:
      - schedule:
          name: ${self:service}-${self:provider.stage}-daily-rollup
          description: Daily usage rollup at 2 AM UTC
          rate: cron(0 2 * * ? *)
          enabled: true

  getUsage:
    handler: src/handlers/get-usage.handler
    description: Get usage metrics for billing
    environment:
      USAGE_METRICS_TABLE: !Ref UsageMetricsTable
    events:
      - http:
          path: /usage
          method: get
          cors: true

resources:
  Resources:
    # API Gateway API Keys
    ApiKey1:
      Type: AWS::ApiGateway::ApiKey
      Properties:
        Name: ${self:service}-${self:provider.stage}-key-1
        Description: API Key for customer 1
        Enabled: true
        StageKeys:
          - RestApiId:
              Ref: ApiGatewayRestApi
            StageName: ${self:provider.stage}

    ApiKey2:
      Type: AWS::ApiGateway::ApiKey
      Properties:
        Name: ${self:service}-${self:provider.stage}-key-2
        Description: API Key for customer 2
        Enabled: true
        StageKeys:
          - RestApiId:
              Ref: ApiGatewayRestApi
            StageName: ${self:provider.stage}

    # Usage Plan
    UsagePlan:
      Type: AWS::ApiGateway::UsagePlan
      Properties:
        UsagePlanName: ${self:service}-${self:provider.stage}-usage-plan
        Description: Usage plan for API billing
        ApiStages:
          - ApiId:
              Ref: ApiGatewayRestApi
            Stage: ${self:provider.stage}
        Quota:
          Limit: 10000
          Period: MONTH
        Throttle:
          BurstLimit: 200
          RateLimit: 100

    # Link API Key 1 to Usage Plan
    UsagePlanKey1:
      Type: AWS::ApiGateway::UsagePlanKey
      Properties:
        KeyId:
          Ref: ApiKey1
        KeyType: API_KEY
        UsagePlanId:
          Ref: UsagePlan

    # Link API Key 2 to Usage Plan
    UsagePlanKey2:
      Type: AWS::ApiGateway::UsagePlanKey
      Properties:
        KeyId:
          Ref: ApiKey2
        KeyType: API_KEY
        UsagePlanId:
          Ref: UsagePlan

    # S3 Bucket for CloudFront Access Logs
    CloudFrontLogsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-cloudfront-logs-${aws:accountId}
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerPreferred
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        LifecycleConfiguration:
          Rules:
            - Id: DeleteOldLogs
              Status: Enabled
              ExpirationInDays: 90

    # CloudFront Function to extract API key for logging
    CloudFrontApiKeyFunction:
      Type: AWS::CloudFront::Function
      Properties:
        Name: ${self:service}-${self:provider.stage}-api-key-extractor
        AutoPublish: true
        FunctionCode: |
          function handler(event) {
            var request = event.request;
            var headers = request.headers;

            // Extract API key from x-api-key header
            var apiKey = headers['x-api-key'] ? headers['x-api-key'].value : 'no-key';

            // Add API key to querystring for CloudFront logging
            request.querystring['cf_api_key'] = { value: apiKey };

            return request;
          }
        FunctionConfig:
          Comment: Extracts API key from header and adds to querystring for logging
          Runtime: cloudfront-js-2.0

    # CloudFront Distribution
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: ${self:service}-${self:provider.stage} CDN for usage tracking
          Enabled: true
          HttpVersion: http2and3
          PriceClass: PriceClass_100

          # CloudFront Access Logging
          Logging:
            Bucket: !GetAtt CloudFrontLogsBucket.DomainName
            IncludeCookies: false
            Prefix: cloudfront-logs/

          # Origins - API Gateway
          Origins:
            - Id: ApiGatewayOrigin
              DomainName: !Sub "${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com"
              OriginPath: /${self:provider.stage}
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
                OriginSSLProtocols:
                  - TLSv1.2

          # Default Cache Behavior
          DefaultCacheBehavior:
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            Compress: true

            # Attach the API key extractor function
            FunctionAssociations:
              - EventType: viewer-request
                FunctionARN: !GetAtt CloudFrontApiKeyFunction.FunctionMetadata.FunctionARN

            # Cache policy - allow API key header to pass through
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # CachingDisabled managed policy

            # Origin request policy - forward all headers including x-api-key
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac  # AllViewerExceptHostHeader managed policy

          # Custom error responses
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 403
              ResponsePagePath: /error.html
              ErrorCachingMinTTL: 300
            - ErrorCode: 404
              ResponseCode: 404
              ResponsePagePath: /error.html
              ErrorCachingMinTTL: 300

    # Glue Database for Athena queries
    UsageDatabase:
      Type: AWS::Glue::Database
      Properties:
        CatalogId: !Ref AWS::AccountId
        DatabaseInput:
          Name: ${self:service}_${self:provider.stage}_usage_db
          Description: Database for CloudFront usage tracking

    # Glue Table for CloudFront Access Logs
    CloudFrontLogsTable:
      Type: AWS::Glue::Table
      Properties:
        CatalogId: !Ref AWS::AccountId
        DatabaseName: !Ref UsageDatabase
        TableInput:
          Name: cloudfront_logs
          Description: CloudFront access logs for usage billing
          TableType: EXTERNAL_TABLE
          Parameters:
            EXTERNAL: 'TRUE'
            'skip.header.line.count': '2'
          StorageDescriptor:
            Location: !Sub s3://${CloudFrontLogsBucket}/cloudfront-logs/
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
              Parameters:
                field.delim: "\t"
                serialization.format: "\t"
            Columns:
              - Name: date
                Type: date
              - Name: time
                Type: string
              - Name: x_edge_location
                Type: string
              - Name: sc_bytes
                Type: bigint
              - Name: c_ip
                Type: string
              - Name: cs_method
                Type: string
              - Name: cs_host
                Type: string
              - Name: cs_uri_stem
                Type: string
              - Name: sc_status
                Type: int
              - Name: cs_referer
                Type: string
              - Name: cs_user_agent
                Type: string
              - Name: cs_uri_query
                Type: string
              - Name: cs_cookie
                Type: string
              - Name: x_edge_result_type
                Type: string
              - Name: x_edge_request_id
                Type: string
              - Name: x_host_header
                Type: string
              - Name: cs_protocol
                Type: string
              - Name: cs_bytes
                Type: bigint
              - Name: time_taken
                Type: float
              - Name: x_forwarded_for
                Type: string
              - Name: ssl_protocol
                Type: string
              - Name: ssl_cipher
                Type: string
              - Name: x_edge_response_result_type
                Type: string
              - Name: cs_protocol_version
                Type: string
              - Name: fle_status
                Type: string
              - Name: fle_encrypted_fields
                Type: int
              - Name: c_port
                Type: int
              - Name: time_to_first_byte
                Type: float
              - Name: x_edge_detailed_result_type
                Type: string
              - Name: sc_content_type
                Type: string
              - Name: sc_content_len
                Type: bigint
              - Name: sc_range_start
                Type: bigint
              - Name: sc_range_end
                Type: bigint
          PartitionKeys:
            - Name: year
              Type: string
            - Name: month
              Type: string
            - Name: day
              Type: string

    # S3 Bucket for Athena Query Results
    AthenaResultsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-athena-results-${aws:accountId}

    # DynamoDB Table for Usage Metrics
    UsageMetricsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-usage-metrics
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: api_key
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: api_key
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          - Key: Purpose
            Value: UsageTracking

  Outputs:
    ApiKey1:
      Description: API Key 1 ID
      Value:
        Ref: ApiKey1

    ApiKey2:
      Description: API Key 2 ID
      Value:
        Ref: ApiKey2

    UsagePlanId:
      Description: Usage Plan ID
      Value:
        Ref: UsagePlan

    CloudFrontDistributionId:
      Description: CloudFront Distribution ID
      Value:
        Ref: CloudFrontDistribution

    CloudFrontDomainName:
      Description: CloudFront Distribution Domain Name
      Value: !GetAtt CloudFrontDistribution.DomainName

    CloudFrontLogsBucketName:
      Description: S3 Bucket for CloudFront Access Logs
      Value:
        Ref: CloudFrontLogsBucket

    AthenaResultsBucketName:
      Description: S3 Bucket for Athena Results
      Value:
        Ref: AthenaResultsBucket

    GlueDatabaseName:
      Description: Glue Database for Athena
      Value:
        Ref: UsageDatabase

    GlueTableName:
      Description: Glue Table for CloudFront Logs
      Value:
        Ref: CloudFrontLogsTable

    UsageMetricsTableName:
      Description: DynamoDB Table for Usage Metrics
      Value:
        Ref: UsageMetricsTable
